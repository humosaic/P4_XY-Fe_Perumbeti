# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "PLT"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of My Multiple CBC Variables")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of My Multiple CBC Variables")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, and Ferritin Variables")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, and Ferritin Variables in Male and Female Gender")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, & Ferritin in Male and Female Gender")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
BDC_PLT <- read_csv("../analysis/data/raw_data/BDC-PltIron-Flat-6-17-2021.csv")
BDC_PLT <- as_tibble(BDC_PLT)
print(BDC_PLT)
tibble::glimpse(BDC_PLT)
print(summary(BDC_PLT))
ggplot(BDC_PLT, aes(x=HB)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RBC)) + geom_histogram()
ggplot(BDC_PLT, aes(x=MCV)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RDW)) + geom_histogram()
ggplot(BDC_PLT, aes(x=PLT)) + geom_histogram()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_histogram()
ggplot(BDC_PLT, aes(x=HB)) + geom_density()
ggplot(BDC_PLT, aes(x=RBC)) + geom_density()
ggplot(BDC_PLT, aes(x=MCV)) + geom_density()
ggplot(BDC_PLT, aes(x=RDW)) + geom_density()
ggplot(BDC_PLT, aes(x=PLT)) + geom_density()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_density()
generate_histograms <- function(df) {
for (col in names(df)) {
# Check if the column is numeric
if (is.numeric(df[[col]])) {
# Generate a histogram
hist(df[[col]], main = col, xlab = col)
}
}
}
# Call the function to generate histograms for the dataset
generate_histograms(BDC_PLT)
par(mar = c(2,2,2,2)) # Changing area margins
hist.data.frame(BDC_PLT)
ggplot(BDC_PLT, aes(x=HB, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RBC, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=MCV, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RDW, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=PLT, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
# Identify the columns that contain numeric data
# Create a matrix of scatterplots for the numeric columns
BDC_PLT_MEPIndices <- BDC_PLT %>%
select(HB, RBC, MCV, RDW, PLT, Ferritin)
print(BDC_PLT_MEPIndices)
print(summary(BDC_PLT_MEPIndices))
tibble::glimpse(BDC_PLT_MEPIndices)
ggplot(BDC_PLT, aes(x = Gender, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Gender", y = "Ferritin") +
coord_flip()
## Assign Data Parameters as an object and replot with a different better color scheme where median is more easily visible
g <-
ggplot(BDC_PLT, aes(x = Ferritin, y = Gender,
color = Gender)) +
labs(x = "Ferritin", y = "Gender") +
scale_color_brewer(palette = "Dark2", guide = "none")
g + geom_boxplot()
## Evaluate Ferritin by Gender with Dot Blot
g + geom_point()
## Evaluate by Ferritin by Gender with Violin Plot with Jitter showing more detail of sample ferritin in the distribution.
g + geom_violin(fill = "gray80", size = 1, alpha = .5) +
geom_jitter(alpha = .25, width = .3) +
coord_flip()
ggplot(BDC_PLT, aes(x = Ethnicity, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Ethnicity", y = "Ferritin")
print(BDC_PLT["Ethnicity"])
ggplot(BDC_PLT, aes(x=Age, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
print(BDC_PLT_MEPIndices)
print(BDC_PLT)
#Example of Histogram
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(binwidth = 0.1, fill = "blue", color = "black") + ggtitle("Histogram of Hemoglobin")
# Example of Bar Chart of Categorical Variables
ggplot(BDC_PLT, aes(x = Gender)) + geom_bar(fill = "orange", color = "black") + ggtitle("Bar Chart of Gender")
# Scatterplot of Hemoglobin vs Ferritin
ggplot(BDC_PLT, aes(x = HB, y = Ferritin)) + geom_point(color = "red") + ggtitle("Scatter Plot of Hemoglobin vs Ferritin")
# Boxplot of Hemoglobin based on Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_boxplot(fill = "green", color = "black") + ggtitle("Box Plot of Hemoglobin Grouped by Gender")
# Violin plot of Hemoglobin by Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB, fill = Gender)) + geom_violin() + ggtitle("Violin Plot of Hemoglobin grouped by Gender")
ggplot(BDC_PLT, aes(x = Gender, fill = Ethnicity)) + geom_bar() + ggtitle("Stacked Bar Chart of Gender and Ethnicity")
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, & Ferritin in Male and Female Gender")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
ggplot(BDC_PLT, aes(x = Ethnicity, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Ethnicity", y = "Ferritin")
print(BDC_PLT["Ethnicity"])
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
ggplot(BDC_PLT, aes(x=Age, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
library(remotes)
install_github("datacamp/finddatasetpkgs")
library(finddatasetpkgs)
finddatasetpkgs::get_dataset_pkgs()
BDC_PLT <- read_csv("../Datasets/BDC-PltIron-Flat-6-17-2021.csv")
BDC_PLT <- as_tibble(BDC_PLT)
print(BDC_PLT)
#Filter Males
Female_Iron <- BDC_PLT %>%
filter(Gender == "F")
print(Female_Iron)
# Map x to Ferritin and y to Hemoglobin
ggplot(Female_Iron, aes(x = Ferritin, y = HB, color = Ethnicity)) + geom_point(alpha = 0.5)
ggplot(BDC_PLT, aes(x = Gender, color = Ethnicity)) + geom_bar()
ggplot(BDC_PLT, aes(x = 1, fill = Ethnicity)) + geom_bar(color = "white") + coord_polar(theta = "y") + theme_void()
ggplot(BDC_PLT) + geom_col(aes(x = HB, y = Gender))
ggplot(BDC_PLT, aes(y = HB, x = log10(Ferritin))) + geom_point()
ggplot(BDC_PLT, aes(y = HB, x = log10(Ferritin))) + geom_point(size=2) + theme_minimal()
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram()
ggplot(BDC_PLT) + geom_histogram(aes(x = HB), alpha = 0.7) + theme_minimal()
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(bins = 50)
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(binwidth = 1, center = 0.5) + scale_x_continuous(breaks = 0:24)
ggplot(BDC_PLT, aes(x = Ferritin)) + geom_density(fill = 'steelblue', bw = 8)
ggplot(BDC_PLT, aes(x = Ferritin)) + geom_density(fill = 'steelblue', bw = 8) + geom_rug(alpha = 0.4)
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_boxplot() + labs(title = "Hemoglobin Distribution")
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_jitter(alpha = 0.3, color = "steelblue") + geom_boxplot(alpha = 0) + labs(title = "Hemoglobin Distribution")
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_jitter(alpha = 0.3, color = "steelblue") + geom_boxplot(alpha = 0) + facet_wrap(~Ethnicity) + labs(title = "Hemoglobin Distribution")
install.packages('ggbeeswarm')
library(ggbeeswarm)
ggplot(BDC_PLT, aes(y = HB, x = Gender)) + geom_beeswarm(color = 'steelblue')
ggplot(BDC_PLT, aes(y = HB, x = Gender)) + geom_violin(fill = 'steelblue')
install.packages('ggridges')
library(ggridges)
ggplot(BDC_PLT, aes(x = HB, y = Gender)) + geom_density_ridges(bandwidth = 2) + xlim(1, 35)
# libraries for Read Data
library('knitr')
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
install.packages('lintr')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
install.packages('lintr')
install.packages('styler')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
install.packages('lintr')
install.packages('styler')
library(styler)
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
clear
quit
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
BDC_PLT <- read_csv("../analysis/data/raw_data/BDC-PltIron-Flat-6-17-2021.csv")
BDC_PLT <- as_tibble(BDC_PLT)
print(BDC_PLT)
tibble::glimpse(BDC_PLT)
print(summary(BDC_PLT))
ggplot(BDC_PLT, aes(x=HB)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RBC)) + geom_histogram()
ggplot(BDC_PLT, aes(x=MCV)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RDW)) + geom_histogram()
ggplot(BDC_PLT, aes(x=PLT)) + geom_histogram()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_histogram()
ggplot(BDC_PLT, aes(x=HB)) + geom_density()
ggplot(BDC_PLT, aes(x=RBC)) + geom_density()
ggplot(BDC_PLT, aes(x=MCV)) + geom_density()
ggplot(BDC_PLT, aes(x=RDW)) + geom_density()
ggplot(BDC_PLT, aes(x=PLT)) + geom_density()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_density()
generate_histograms <- function(df) {
for (col in names(df)) {
# Check if the column is numeric
if (is.numeric(df[[col]])) {
# Generate a histogram
hist(df[[col]], main = col, xlab = col)
}
}
}
# Call the function to generate histograms for the dataset
generate_histograms(BDC_PLT)
par(mar = c(2,2,2,2)) # Changing area margins
hist.data.frame(BDC_PLT)
ggplot(BDC_PLT, aes(x=HB, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RBC, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=MCV, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RDW, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=PLT, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
# Identify the columns that contain numeric data
# Create a matrix of scatterplots for the numeric columns
BDC_PLT_MEPIndices <- BDC_PLT %>%
select(HB, RBC, MCV, RDW, PLT, Ferritin)
print(BDC_PLT_MEPIndices)
print(summary(BDC_PLT_MEPIndices))
tibble::glimpse(BDC_PLT_MEPIndices)
ggplot(BDC_PLT, aes(x = Gender, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Gender", y = "Ferritin") +
coord_flip()
## Assign Data Parameters as an object and replot with a different better color scheme where median is more easily visible
g <-
ggplot(BDC_PLT, aes(x = Ferritin, y = Gender,
color = Gender)) +
labs(x = "Ferritin", y = "Gender") +
scale_color_brewer(palette = "Dark2", guide = "none")
g + geom_boxplot()
## Evaluate Ferritin by Gender with Dot Blot
g + geom_point()
## Evaluate by Ferritin by Gender with Violin Plot with Jitter showing more detail of sample ferritin in the distribution.
g + geom_violin(fill = "gray80", size = 1, alpha = .5) +
geom_jitter(alpha = .25, width = .3) +
coord_flip()
ggplot(BDC_PLT, aes(x = Ethnicity, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Ethnicity", y = "Ferritin")
print(BDC_PLT["Ethnicity"])
ggplot(BDC_PLT, aes(x=Age, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
print(BDC_PLT_MEPIndices)
print(BDC_PLT)
#Example of Histogram
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(binwidth = 0.1, fill = "blue", color = "black") + ggtitle("Histogram of Hemoglobin")
# Example of Bar Chart of Categorical Variables
ggplot(BDC_PLT, aes(x = Gender)) + geom_bar(fill = "orange", color = "black") + ggtitle("Bar Chart of Gender")
# Scatterplot of Hemoglobin vs Ferritin
ggplot(BDC_PLT, aes(x = HB, y = Ferritin)) + geom_point(color = "red") + ggtitle("Scatter Plot of Hemoglobin vs Ferritin")
# Boxplot of Hemoglobin based on Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_boxplot(fill = "green", color = "black") + ggtitle("Box Plot of Hemoglobin Grouped by Gender")
# Violin plot of Hemoglobin by Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB, fill = Gender)) + geom_violin() + ggtitle("Violin Plot of Hemoglobin grouped by Gender")
ggplot(BDC_PLT, aes(x = Gender, fill = Ethnicity)) + geom_bar() + ggtitle("Stacked Bar Chart of Gender and Ethnicity")
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, & Ferritin in Male and Female Gender")
knitr::opts_chunk$set(fig.align = 'left', echo = TRUE)
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
BDC_PLT <- read_csv("../analysis/data/raw_data/BDC-PltIron-Flat-6-17-2021.csv")
BDC_PLT <- as_tibble(BDC_PLT)
print(BDC_PLT)
tibble::glimpse(BDC_PLT)
print(summary(BDC_PLT))
ggplot(BDC_PLT, aes(x=HB)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RBC)) + geom_histogram()
ggplot(BDC_PLT, aes(x=MCV)) + geom_histogram()
ggplot(BDC_PLT, aes(x=RDW)) + geom_histogram()
ggplot(BDC_PLT, aes(x=PLT)) + geom_histogram()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_histogram()
ggplot(BDC_PLT, aes(x=HB)) + geom_density()
ggplot(BDC_PLT, aes(x=RBC)) + geom_density()
ggplot(BDC_PLT, aes(x=MCV)) + geom_density()
ggplot(BDC_PLT, aes(x=RDW)) + geom_density()
ggplot(BDC_PLT, aes(x=PLT)) + geom_density()
ggplot(BDC_PLT, aes(x=Ferritin)) + geom_density()
generate_histograms <- function(df) {
for (col in names(df)) {
# Check if the column is numeric
if (is.numeric(df[[col]])) {
# Generate a histogram
hist(df[[col]], main = col, xlab = col)
}
}
}
# Call the function to generate histograms for the dataset
generate_histograms(BDC_PLT)
par(mar = c(2,2,2,2)) # Changing area margins
hist.data.frame(BDC_PLT)
ggplot(BDC_PLT, aes(x=HB, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RBC, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=MCV, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=RDW, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
ggplot(BDC_PLT, aes(x=PLT, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
# Identify the columns that contain numeric data
# Create a matrix of scatterplots for the numeric columns
BDC_PLT_MEPIndices <- BDC_PLT %>%
select(HB, RBC, MCV, RDW, PLT, Ferritin)
print(BDC_PLT_MEPIndices)
print(summary(BDC_PLT_MEPIndices))
tibble::glimpse(BDC_PLT_MEPIndices)
ggplot(BDC_PLT, aes(x = Gender, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Gender", y = "Ferritin") +
coord_flip()
## Assign Data Parameters as an object and replot with a different better color scheme where median is more easily visible
g <-
ggplot(BDC_PLT, aes(x = Ferritin, y = Gender,
color = Gender)) +
labs(x = "Ferritin", y = "Gender") +
scale_color_brewer(palette = "Dark2", guide = "none")
g + geom_boxplot()
## Evaluate Ferritin by Gender with Dot Blot
g + geom_point()
## Evaluate by Ferritin by Gender with Violin Plot with Jitter showing more detail of sample ferritin in the distribution.
g + geom_violin(fill = "gray80", size = 1, alpha = .5) +
geom_jitter(alpha = .25, width = .3) +
coord_flip()
ggplot(BDC_PLT, aes(x = Ethnicity, y = Ferritin)) +
geom_boxplot(fill = "indianred") +
labs(x = "Ethnicity", y = "Ferritin")
print(BDC_PLT["Ethnicity"])
ggplot(BDC_PLT, aes(x=Age, y=Ferritin)) + geom_point() + geom_smooth(method="lm")
print(BDC_PLT_MEPIndices)
print(BDC_PLT)
#Example of Histogram
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(binwidth = 0.1, fill = "blue", color = "black") + ggtitle("Histogram of Hemoglobin")
# Example of Bar Chart of Categorical Variables
ggplot(BDC_PLT, aes(x = Gender)) + geom_bar(fill = "orange", color = "black") + ggtitle("Bar Chart of Gender")
# Scatterplot of Hemoglobin vs Ferritin
ggplot(BDC_PLT, aes(x = HB, y = Ferritin)) + geom_point(color = "red") + ggtitle("Scatter Plot of Hemoglobin vs Ferritin")
# Boxplot of Hemoglobin based on Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_boxplot(fill = "green", color = "black") + ggtitle("Box Plot of Hemoglobin Grouped by Gender")
# Violin plot of Hemoglobin by Gender
ggplot(BDC_PLT, aes(x = Gender, y = HB, fill = Gender)) + geom_violin() + ggtitle("Violin Plot of Hemoglobin grouped by Gender")
ggplot(BDC_PLT, aes(x = Gender, fill = Ethnicity)) + geom_bar() + ggtitle("Stacked Bar Chart of Gender and Ethnicity")
# Scatter plot of Hemoglobin, MCV, and Platelet Count with GGally library
ggpairs(BDC_PLT, columns = c("HB", "MCV", "Ferritin"), mapping = aes(color = Gender), lower = list(continuous = "points"), diag = list(continuous = "densityDiag")) + ggtitle("Scatter Plot Matrix of Hemoglobin, MCV, & Ferritin in Male and Female Gender")
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# Lint code to check for errors
install.packages('lintr')
# Autoformatters to format code in an easy to read way.
install.packages('styler')
library(styler)
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
library(remotes)
install_github("datacamp/finddatasetpkgs")
library(finddatasetpkgs)
finddatasetpkgs::get_dataset_pkgs()
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# Lint code to check for errors
install.packages('lintr')
# Autoformatters to format code in an easy to read way.
install.packages('styler')
library(styler)
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
library(remotes)
install_github("datacamp/finddatasetpkgs")
library(finddatasetpkgs)
finddatasetpkgs::get_dataset_pkgs()
BDC_PLT <- read_csv("../Datasets/BDC-PltIron-Flat-6-17-2021.csv")
install.packages("styler")
install.packages("styler")
#Filter Males
Female_Iron <- BDC_PLT %>%
filter(Gender == "F")
print(Female_Iron)
# Map x to Ferritin and y to Hemoglobin
ggplot(Female_Iron, aes(x = Ferritin, y = HB, color = Ethnicity)) + geom_point(alpha = 0.5)
ggplot(BDC_PLT, aes(x = Gender, color = Ethnicity)) + geom_bar()
ggplot(BDC_PLT, aes(x = 1, fill = Ethnicity)) + geom_bar(color = "white") + coord_polar(theta = "y") + theme_void()
ggplot(BDC_PLT) + geom_col(aes(x = HB, y = Gender))
ggplot(BDC_PLT, aes(y = HB, x = log10(Ferritin))) + geom_point()
ggplot(BDC_PLT, aes(y = HB, x = log10(Ferritin))) + geom_point(size=2) + theme_minimal()
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram()
ggplot(BDC_PLT) + geom_histogram(aes(x = HB), alpha = 0.7) + theme_minimal()
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(bins = 50)
ggplot(BDC_PLT, aes(x = HB)) + geom_histogram(binwidth = 1, center = 0.5) + scale_x_continuous(breaks = 0:24)
ggplot(BDC_PLT, aes(x = Ferritin)) + geom_density(fill = 'steelblue', bw = 8)
ggplot(BDC_PLT, aes(x = Ferritin)) + geom_density(fill = 'steelblue', bw = 8) + geom_rug(alpha = 0.4)
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_boxplot() + labs(title = "Hemoglobin Distribution")
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_jitter(alpha = 0.3, color = "steelblue") + geom_boxplot(alpha = 0) + labs(title = "Hemoglobin Distribution")
ggplot(BDC_PLT, aes(x = Gender, y = HB)) + geom_jitter(alpha = 0.3, color = "steelblue") + geom_boxplot(alpha = 0) + facet_wrap(~Ethnicity) + labs(title = "Hemoglobin Distribution")
install.packages('ggbeeswarm')
library(ggbeeswarm)
ggplot(BDC_PLT, aes(y = HB, x = Gender)) + geom_beeswarm(color = 'steelblue')
ggplot(BDC_PLT, aes(y = HB, x = Gender)) + geom_violin(fill = 'steelblue')
install.packages('ggridges')
library(ggridges)
ggplot(BDC_PLT, aes(x = HB, y = Gender)) + geom_density_ridges(bandwidth = 2) + xlim(1, 35)
install.packages("ggridges")
install.packages("ggbeeswarm")
knitr::opts_chunk$set(echo = TRUE)
install.packages('shiny')
install.packages('shiny')
library(shiny)
# install.packages('readr', 'ggplot2', 'tidyr', 'dplyr', 'ggplot2')
# install.packages('survival', 'lattice', 'Hmisc') # These have dependencies with ggplot2
# install.packages('reshape') # If you want to melt data together
# install.packages('GGally')
# libraries for Read Data
library('knitr')
library('readr')
# Libraries for Data Cleaning
library('tidyr')
library('dplyr')
# Libraries Plotting
library('ggplot2')
library('Hmisc')
library('GGally')
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("palmerpenguins")
#install packages
install.packages("BiocManager")
install.packages("forcats")
